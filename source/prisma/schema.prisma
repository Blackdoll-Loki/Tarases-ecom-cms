// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Models
model User {
  id        Int       @id @default(autoincrement())
  fullName  String?
  email     String    @unique
  password  String
  role      AdminRole @default(STUFF)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

// Enums
enum AdminRole {
  STUFF
  ADMIN
}

model Customer {
  id        Int       @id @default(autoincrement())
  firstName String
  lastName  String
  email     String    @unique
  password  String?
  phone     String?
  notes     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  addresses CustomerAddress[]
}

model CustomerAddress {
  id         Int      @id @default(autoincrement())
  customerId Int
  country    String
  firstName  String
  lastName   String
  company    String?
  address    String
  apartment  String?
  city       String
  postalcode String
  phone      String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  customer Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
}

model Category {
  id          Int       @id @default(autoincrement())
  title       String    @db.VarChar(255)
  description String?   @db.Text
  image       String?   @db.VarChar(255)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime? @db.Timestamp(6)

  products Product[]

  @@map("categories") // Optional: specify the table name in the database
}

model Product {
  id             Int           @id @default(autoincrement())
  slug           String        @unique @db.VarChar(255)
  title          String        @db.VarChar(255)
  description    String?       @db.Text
  image          String?       @db.VarChar(255)
  price          Float
  compareAtPrice Float?
  costPerItem    Float?
  quantity       Int
  SKU            String?       @db.VarChar(255)
  barcode        String?       @db.VarChar(255)
  status         ProductStatus
  rate           Float?
  totalReviews   Int?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  deletedAt      DateTime?     @db.Timestamp(6)

  categoryId Int
  category   Category @relation(fields: [categoryId], references: [id])

  @@map("products") // Optional: specify the table name in the database
}

enum ProductStatus {
  active
  draft
}
